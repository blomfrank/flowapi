openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/boukestam/Flow/1.0.0 '
  - description: Test server
    url: 'https://flow-server-test.azurewebsites.com'
info:
  description: This is the REST API for Flow
  version: 1.0.0
  title: Flow REST API
  contact:
    email: bouke.stam@kubion.nl
tags:
  - name: Instance
  - name: Flow
  - name: Table
  - name: Type
paths:
  '/instance/{code}/init':
    post:
      summary: Create and start a new session
      tags:
        - Instance
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: Code of the flow
        - in: query
          name: dev
          schema:
            type: boolean
          required: false
          description: If this is a development (test) session
        - in: query
          name: debug
          schema:
            type: boolean
          required: false
          description: If debug info should be included in the response
      responses:
        '200':
          description: Flow initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWResult'
        '404':
          description: There is no flow with code ...
      requestBody:
        description: Key/value pairs that will be put into flow state
        content:
          application/json:
            schema:
              type: object
  '/instance/{code}/create':
    post:
      summary: Create a new session without starting it
      tags:
        - Instance
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: Code of the flow
        - in: query
          name: dev
          schema:
            type: boolean
          required: false
          description: If this is a development (test) session
      responses:
        '200':
          description: Flow created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 34873
        '404':
          description: There is no flow with code ...
  '/instance/{id}/start':
    post:
      summary: Start an existing session
      tags:
        - Instance
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the session
        - in: query
          name: debug
          schema:
            type: boolean
          required: false
          description: If debug info should be included in the response
      responses:
        '200':
          description: Flow started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWResult'
        '404':
          description: There is no session with id ...
      requestBody:
        description: Key/value pairs that will be put into flow state
        content:
          application/json:
            schema:
              type: object
  '/instance/{id}/continue':
    post:
      summary: Continue/advance an existing session
      tags:
        - Instance
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the session
        - in: query
          name: debug
          schema:
            type: boolean
          required: false
          description: If debug info should be included in the response
      responses:
        '200':
          description: Flow advanced successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWResult'
        '404':
          description: There is no session with id ...
      requestBody:
        description: Key/value pairs that will be put into flow state
        content:
          application/json:
            schema:
              type: object
  '/instance/{id}/back':
    post:
      summary: Revert an existing session to the previous step
      tags:
        - Instance
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the session
        - in: query
          name: debug
          schema:
            type: boolean
          required: false
          description: If debug info should be included in the response
      responses:
        '200':
          description: Flow reverted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWResult'
        '404':
          description: There is no session with id ...
  '/instance/{id}/result':
    get:
      summary: Get the last result from an existing session
      tags:
        - Instance
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the session
        - in: query
          name: debug
          schema:
            type: boolean
          required: false
          description: If debug info should be included in the response
      responses:
        '200':
          description: Result gotten successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWResult'
        '404':
          description: There is no session with id ...
  '/instance/{id}/layout':
    get:
      summary: Get all layout information (e.g. for track and trace) from an existing session
      tags:
        - Instance
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the session
        - in: query
          name: debug
          schema:
            type: boolean
          required: false
          description: If debug info should be included in the response
      responses:
        '200':
          description: Layout gotten successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWLayout'
        '404':
          description: There is no session with id ...
  /flow:
    get:
      summary: Gets all flows
      tags:
        - Flow
      responses:
        '200':
          description: List of all flows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FLOWFlow'
    post:
      summary: Creates a flow
      tags:
        - Flow
      responses:
        '200':
          description: Created flow successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWFlow'
        '400':
          description: 'Invalid name: must be between 3 and 50 characters long'
        '409':
          description: Flow with code ... already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  example: Mijn werkstroom
                type:
                  type: integer
                  example: 3
  '/flow/{code}':
    get:
      summary: Get a single flow
      tags:
        - Flow
      parameters:
        - in: path
          name: code
          schema:
            type: integer
          required: true
          description: Code of the flow
      responses:
        '200':
          description: The flow with that code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWFlow'
        '404':
          description: There is no flow with code ...
    delete:
      summary: Deletes a flow
      tags:
        - Flow
      parameters:
        - in: path
          name: code
          schema:
            type: integer
          required: true
          description: Code of the flow
      responses:
        '200':
          description: Deleted flow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: There is no flow with code ...
  '/flow/{code}/tree':
    get:
      summary: 'Get the tree (nodes, actions) of a flow'
      tags:
        - Flow
      parameters:
        - in: path
          name: code
          schema:
            type: integer
          required: true
          description: Code of the flow
      responses:
        '200':
          description: The tree of the flow with that code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWTree'
        '404':
          description: There is no flow with code ...
  '/flow/{code}/graph':
    get:
      summary: Get the graph (xml export of drawing) of a flow
      tags:
        - Flow
      parameters:
        - in: path
          name: code
          schema:
            type: integer
          required: true
          description: Code of the flow
      responses:
        '200':
          description: The graph of the flow with that code
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/FLOWTree'
        '404':
          description: There is no flow with code ...
    post:
      summary: Set the graph (xml export of drawing) of a flow
      tags:
        - Flow
      parameters:
        - in: path
          name: code
          schema:
            type: integer
          required: true
          description: Code of the flow
      responses:
        '200':
          description: Set flow graph successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: There is no flow with code ...
      requestBody:
        content:
          text/xml:
            schema:
              type: string
  '/flow/{code}/publish':
    post:
      summary: Publish a new version of the flow
      tags:
        - Flow
      parameters:
        - in: path
          name: code
          schema:
            type: integer
          required: true
          description: Code of the flow
      responses:
        '200':
          description: Published flow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: There is no flow with code ...
  /flow/import:
    post:
      summary: Import a json (flow export) or excel (IRIS decision tree export) file
      tags:
        - Flow
      parameters:
        - in: query
          name: code
          schema:
            type: integer
          required: true
          description: Code of the new flow
      responses:
        '200':
          description: Published flow successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWFlow'
        '409':
          description: Flow with code ... already exists
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
  /table:
    get:
      summary: Gets all tables
      tags:
        - Table
      responses:
        '200':
          description: List of all tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FLOWTable'
    post:
      summary: Creates a table
      tags:
        - Table
      responses:
        '200':
          description: Created table successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWTable'
        '400':
          description: 'Invalid name: must be between 3 and 50 characters long'
        '409':
          description: Table with code ... already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  example: Mijn tabel
                type:
                  type: string
                  example: 'DT | RT'
  '/table/{code}':
    get:
      summary: Get a single table
      tags:
        - Table
      parameters:
        - in: path
          name: code
          schema:
            type: integer
          required: true
          description: Code of the table
      responses:
        '200':
          description: The table with that code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FLOWTable'
        '404':
          description: There is no table with code ...
    delete:
      summary: Deletes a table
      tags:
        - Table
      parameters:
        - in: path
          name: code
          schema:
            type: integer
          required: true
          description: Code of the table
      responses:
        '200':
          description: Deleted table successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: There is no table with code ...
  /flowType:
    get:
      summary: Gets all flow types
      tags:
        - Type
      responses:
        '200':
          description: List of all flow types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FLOWTypeWithActions'
  /actionDefinition:
    get:
      summary: Gets all action definitions
      tags:
        - Type
      responses:
        '200':
          description: List of all action definitions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FLOWActionDefinition'
components:
  schemas:
    FLOWFlow:
      type: object
      required:
        - label
      properties:
        id:
          type: integer
          example: 3
        code:
          type: string
          example: werkstroom
        label:
          type: string
          example: Werkstroom
        type:
          $ref: '#/components/schemas/FLOWType'
        definition:
          type: 'string,'
          example: '{nodes: [...]}'
        history:
          type: string
          example: '[{changes: [...]}]'
        drawing:
          type: string
          example: '<mxGraph><mxNode/></mxGraph>'
        publishedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FLOWType:
      type: object
      properties:
        id:
          type: integer
          example: 3
        code:
          type: string
          example: workflow
        label:
          type: string
          example: Werkstroom
    FLOWTypeWithActions:
      type: object
      properties:
        id:
          type: integer
          example: 3
        code:
          type: string
          example: workflow
        label:
          type: string
          example: Werkstroom
        actions:
          type: array
          items:
            $ref: '#/components/schemas/FLOWActionDefinition'
    FLOWActionDefinition:
      type: object
      properties:
        id:
          type: integer
          example: 3
        code:
          type: string
          example: transition
        label:
          type: string
          example: Ga naar
        icon:
          type: string
          example: icon-transition
        options:
          type: string
          example: '[{title: "Element toevoegen", ...}]'
        fields:
          type: string
          example: '[{type: "text", ...}]'
        onCreate:
          type: string
          example: 'path => applySet(...)'
        isFlow:
          type: string
          example: false
    FLOWTable:
      type: object
      required:
        - label
      properties:
        id:
          type: integer
          example: 3
        code:
          type: string
          example: rv_diagnose
        label:
          type: string
          example: Reparatieverzoek diagnose
        type:
          type: string
          example: 'DT | RT'
        definition:
          type: 'string,'
          example: '{columns: [...], rows: [...]}'
        history:
          type: string
          example: '[{changes: [...]}]'
        publishedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FLOWResult:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 3824
        debug:
          type: object
          properties:
            id:
              type: string
              example: 12p89urdio4
            state:
              type: object
            activeNode:
              type: integer
              example: 4
            code:
              type: string
              example: Klachten_afhandelen
            trace:
              type: array
              items:
                type: integer
                example:
                  - 1
                  - 2
                  - 5
                  - 6
        deadline:
          type: string
          example: Werkstroom
        elements:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: 'display | select | input | link'
              data:
                type: object
    FLOWLayout:
      type: object
      properties:
        startNode:
          type: integer
          example: 1
        nodes:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              label:
                type: string
                example: Start
              transitions:
                type: array
                items:
                  type: integer
                  example:
                    - 2
                    - 3
    FLOWTree:
      type: object
      properties:
        startNode:
          type: integer
          example: 1
        nodes:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              label:
                type: string
                example: Start
              actions:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: transition
                    data:
                      type: object
